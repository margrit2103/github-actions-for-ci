name: ci-sql-regression-margrit-test
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      dbtag:
        description: Tag for quantsolutions/testdb image

jobs:
  # This workflow contains a single job called "build"
  sql-regression:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout goodx repository. 
        uses: actions/checkout@v2

      - name: Create _dump directory for storing results.
        run: |
             mkdir -p ./_dump
             mkdir -p ./_dump/sql_regression
             mkdir -p ./_dump/sql_regression/answ
             mkdir -p ./_dump/sql_regression/model_answ
             cp -al ./src/tests/sql_regression/*.txt ./_dump/sql_regression/model_answ

      - name: Collect settings 
        id: settings
        run: |
          while IFS= read -r l; do
            echo "$l" | awk '{ print "::set-output name="$1"::"$2 }';
            echo "$l" | awk '{ print "@@@setting "$1" "$2 }';
          done <<< $(cat << EOF
            dbimg quantsolutions/testdb:${{ github.event.inputs.dbtag || 'latest' }}
            branch $(git rev-parse --abbrev-ref $(git describe --all))
            githash $(git rev-parse HEAD)
            committed $(git show -s --format=%ct)
          EOF
          )      
          
      #goodx repository is mounted in the docker as addressed as goodx_repo. Results written to ./goodx_repo/_dump. (addnab/docker-run-action)
      #addnab/docker-run-action does not automatically run docker endpoint, hence postgres is kicked off manually.
      #https://github.com/actions/upload-artifact
      - name: Checkout docker, and run scripts. Script result written to ./goodx_repo/_dump.  (addnab/docker-run-action)
        uses: addnab/docker-run-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          image: ${{ steps.settings.outputs.dbimg }}
          shell: bash
          options: -e PGUSER=postgres -e PGHOST=localhost -e PGPORT=5432 -e PGPASSWORD=masterkey -e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin -e PGDATA=/var/lib/postgresql/pgdata -v ${{ github.workspace }}:/goodx_repo
          run: |
              echo ... Starting postgres
              su - postgres -c '/usr/lib/postgresql/12/bin/pg_ctl start -D /var/lib/postgresql/pgdata'
              echo ... Testing
              TESTDIR=./goodx_repo/src/tests/sql_regression
              RESULTDIR=./goodx_repo/_dump/sql_regression/answ
              echo ... Prepare regression functions
              psql -U postgres -d goodxweb -f "$TESTDIR/goodx.regression_test_functions.sql"
              
              echo ... Run tests
              psql -U postgres -d goodxweb -c"SET client_min_messages TO WARNING;" -f "$TESTDIR/goodx.basic_transaction_test.sql" > $RESULTDIR/goodx.basic_transaction_test.test_output
              psql -U postgres -d goodxweb -c"SET client_min_messages TO WARNING;" -f "$TESTDIR/goodx.invoices.icd10.sql" > $RESULTDIR/goodx.invoices.icd10.test_output
              psql -U postgres -d goodxweb -c"SET client_min_messages TO WARNING;" -f "$TESTDIR/goodx.assistant_anaesthetist.sql" > $RESULTDIR/goodx.assistant_anaesthetist.test_output
              psql -U postgres -d goodxweb -c"SET client_min_messages TO WARNING;" -f "$TESTDIR/goodx.assistant_000_credit_notes" -f "$TESTDIR/goodx.assistant_001_credit_notes.sql" > $RESULTDIR/goodx.assistant_001_credit_notes.test_output
              
              echo .... Comparing results
              python3 ./goodx_repo/src/tests/sql_regression/compare_results.py 

    #          echo .... EXECUTING python  python3 
    #          python3 ./goodx_repo/src/tests/sql_regression/test_python.py --output-dir ./goodx_repo/_dump/ --db-tag ${{ steps.settings.outputs.dbimg }}  --test-dir ./goodx_repo/src/tests/sql_regression/ 

          
      - name: Store results in dump.zip (actions/upload-artifact) 
        timeout-minutes: 10
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: dump
          path: _dump

